Python List

Python List is an ordered container
A list is created by using square brackets ([]).

The object are placed inside those brackets and are separated by commas (,)

pets = ["dog", "cat", "rabbit"]
print(pets)

A list can contain mixed data types
x = ["dog",2,"True"]
print(x)

=======Function used with List======

=========Indexing==============
indexing is used to access the items of a list.
--it uses square brackets and numbers to access individual items of a list.
--0 refers to the first item, 1 refers to the second item and so on.

pets = ["kegs", "cae", "rabbit"]
print(pets[0])
print(pets[1])
print(pets[2])


=========Negative Indexing=============
Negative indexing is used to access the items of a list using negative numbers.
Where -1 refers to the last item, -2 refers to second to last item.

pets = ["kegs", "cae", "rabbit"]
print(pets[0])
print(pets[1])
print(pets[2])

========Range of Indexes ==============
By using a colon(:), we can access a range of items at once.
Separating two indexes using the colon.
The first index is the start of the range, while the second index is the end of the range(not included).

pets = ["dog", "cat", "rabbit", "fish", "hen"]
x  = pets[1:3]
print(x)

===
if you don't specify the first index the range start from index 0.
pets = ["dog", "cat", "rabbit", "fish", "hen"]
x = pets[:2]
print(x)


============Adding Items to a list========================
The append() method adds item to the end of the list.
pets = ["dog", "cat", "rabbit", "fish", "hen"]
pets.appends("goat")
print(pets) "goat was  added to the pet list"


The insert() method inserts an item at the specified index.
pets = ["dog", "cat", "rabbit", "fish", "hen"]
pets.insert(0, "goat")
pets.insert(2, "mouse")
print(pets)
print(pets[0])
print(pets[2])


=========Deleting Items from a list============
The pop() method remove the last item from a list.
pets = ["dog", "cat", "rabbit", "fish", "hen"]
pet.pop()
print(pets)

=== Remove
The remove() method removes the specified item value.
pets = ["dog", "cat", "rabbit", "fish", "hen"]
pets.remove("fist")
print(pets)

=== del
To delete a specified index, use the del keyword.
pets = ["dog", "cat", "rabbit", "fish", "hen"]
del pets[1]
print(pets)

=== Getting the length of a list=====
pets = ["dog", "cat", "rabbit", "fish", "hen"]
print(len(pet))

==== Changing an Item's Value ====
To change an item's value, access the index first and use assignment operator.
pets = ["dog", "cat", "rabbit", "fish", "hen"]
pets[3] = "goat"
print(pets)

==== Checking if an item Exists ====
To check if an item exists in a list, use the 'in' operator.
it returns True if the item is found, otherwise return False.
pets = ["dog", "cat", "rabbit", "fish", "hen"]
prints("rabbit" in pets)
prints("Lion" in pets)

==== Extending a list ==
The extend() method adds all item from a list to another list.
 value1 = [1,2,3]
 value2 = [4,5,6]
 value1.extend(value2)
 print(value1)

===Looping Through a list=====
Looping through a list basically means accessing all its items one by one.
The 'For' loop is used to loop through a list.

pets = ["dog", "cat", "rabbit", "fish", "hen"]
for pet in pets:
print(pets)

======Another Way to crate a list====
The way a list created with [] is called literal
== Another way to create a list is to use the list() constructor.
Pets = list(("dog", "cat", "rabbit"))
print(pets)
